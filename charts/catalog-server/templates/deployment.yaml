apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "catalog-server.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "catalog-server.name" . }}
    helm.sh/chart: {{ include "catalog-server.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "catalog-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "catalog-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        backup.velero.io/backup-volumes: config
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.cc.enabled }}
        checksum/configmap-java-config: {{ include (print $.Template.BasePath "/configmap-java-config.yaml") . | sha256sum }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ template "catalog-server.name" . }}
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: kafka-init
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        args:
          - topic_init.sh
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "{{ .Values.kafka }}"
        - name: KAFKA_SCHEMA_REGISTRY
          value: "{{ .Values.schema_registry }}"
        - name: KAFKA_NUM_BROKERS
          value: "{{ .Values.kafka_num_brokers }}"
        - name: RADAR_NUM_PARTITIONS
          value: "3"
        - name: RADAR_NUM_REPLICATION_FACTOR
          value: "3"
        {{- if .Values.cc.enabled }}
        - name: KAFKA_CONFIG_PATH
          value: "/etc/config/java-config.properties"
        - name: SCHEMA_REGISTRY_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "catalog-server.fullname" . }}
              key: srApiKey
        - name: SCHEMA_REGISTRY_API_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "catalog-server.fullname" . }}
              key: srApiSecret
        {{- end }}
        volumeMounts:
          - name: config
            mountPath: /etc/radar-schemas
          - name: config-schemas
            mountPath: /schema/conf
          {{- if .Values.cc.enabled }}
          - name: cc-java-config
            mountPath: /etc/config/
          {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          args:
            - radar-catalog-server
            - /schema/merged
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 9010
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /source-types
              port: http
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /source-types
              port: http
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/radar-schemas
            - name: config-schemas
              mountPath: /schema/conf
      volumes:
        - name: config
          configMap:
            name: {{ include "catalog-server.fullname" . }}
        - name: config-schemas
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "catalog-server.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.cc.enabled }}
        - name: cc-java-config
          configMap:
            name: {{ include "catalog-server.fullname" . }}-java-config
        {{- end -}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
